#include <iostream>

/*

The below is a backtracking algorithm sorced mostly from geeksforgeeks.com. 
It is practice for my computational thinking exam 2020.

What is a backtracking algorithm?
	Backtracking is an alorithm that solves problems recursively by building a solution incrementally. 
	Building one peice at a time, and going back to previous states when one solution proves to fail.

*/

const int n = 9;
int step = 0;

void PrintBoard(int board[n][n])
{
	for (int i = 0; i < 10; i++)
	{
		if (i == 0 || i == 3 ||  i == 6 || i == 9)
		{
			std::cout << "   -----------------------\n";
		}
		if (i < 9)
		{
			std::cout << " | ";
			for (int j = 0; j < 9; j++)
			{
				std::cout << board[i][j] << " ";
				if (j == 2 || j == 5)
				{
					std::cout << " | ";
				}
			}
			std::cout << "|\n";
		}
	}
}

bool CheckRow(int board[n][n], int row, int num)
{
	for (int i = 0; i < n; i++)
	{
		if (board[row][i] == num)
		{
			return false;
		}
	}
	return true;
}

bool CheckCol(int board[n][n], int col, int num)
{
	for (int i = 0; i < n; i++)
	{
		if (board[i][col] == num)
		{
			return false;
		}
	}
	return true;
}

bool CheckSection(int board[n][n], int rowStart, int colStart, int num)
{
	for (int row = 0; row < 3; row++)
	{
		for (int col = 0; col < 3; col++)
		{
			if (board[row + rowStart][col + colStart] == num)
			{
				return false;
			}
		}
	}
	return true;
}

bool CheckSafe(int board[n][n], int row, int col, int num)
{
	return CheckRow(board, row, num) && CheckCol(board, col, num) && CheckSection(board, row - row % 3, col - col % 3, num) ? true : false;
}

bool FindEmptyCell(int board[n][n], int& row, int& col)
{
	for (row = 0; row < n; row++)
	{
		for (col = 0; col < n; col++)
		{
			if (board[row][col] == 0)
			{
				return true;
			}
		}
	}
	return false;
}

bool Solve(int board[n][n])
{
	std::cout << "Solving... Step: " << step++ << "\n";
	int row, col;
	if (!FindEmptyCell(board, row, col))
	{
		return true;
	}
	for (int num = 1; num <= 9; num++)
	{
		if (CheckSafe(board, row, col, num))
		{
			board[row][col] = num;
			if (Solve(board))
			{
				return true;
			}
			board[row][col] = 0;
		}
	}
	return false;
}

int main()
{
	int board1[n][n] = { {4, 0, 0, 0, 0, 0, 7, 0, 2},
					     {0, 0, 0, 4, 5, 0, 0, 8, 6},
						 {0, 2, 5, 0, 0, 0, 0, 0, 0},
						 {6, 0, 2, 0, 0, 0, 0, 9, 7},
						 {0, 0, 0, 0, 2, 0, 0, 0, 0},
						 {1, 9, 0, 0, 0, 0, 6, 0, 3},
						 {0, 0, 0, 0, 0, 0, 9, 3, 0},
						 {3, 5, 0, 0, 8, 1, 0, 0, 0},
						 {2, 0, 9, 0, 0, 0, 0, 0, 8} };

	int board2[n][n] = { {3, 0, 6, 5, 0, 8, 4, 0, 0},
						 {5, 2, 0, 0, 0, 0, 0, 0, 0},
						 {0, 8, 7, 0, 0, 0, 0, 3, 1},
						 {0, 0, 3, 0, 1, 0, 0, 8, 0},
						 {9, 0, 0, 8, 6, 3, 0, 0, 5},
						 {0, 5, 0, 0, 9, 0, 6, 0, 0},
						 {1, 3, 0, 0, 0, 0, 2, 5, 0},
						 {0, 0, 0, 0, 0, 0, 0, 7, 4},
						 {0, 0, 5, 2, 0, 6, 3, 0, 0} };

	std::cout << "Steven Davenport - Sodoku Solver - Backtracking\n";
	PrintBoard(board1);
	std::cout << "Press any key to solve...\n";
	std::cin.get();

	if (Solve(board1))
	{
		std::cout << "Solved!\n";
		PrintBoard(board1);
	}
	else
	{
		std::cout << "CannotSolve...\n";
	}

	system("pause");
}
